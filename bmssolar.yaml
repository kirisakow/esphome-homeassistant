substitutions:
  name: bmssolar
  max_cycles: "6000.0"
  tx_pin: GPIO1
  rx_pin: GPIO3
esphome:
  name: bmssolar
  friendly_name: bmssolar
esp32:
  board: esp32dev
  framework:
    type: arduino
logger:
  baud_rate: 0
globals:
  - id: can_420_rx
    type: int
    restore_value: 'no'
    initial_value: '0'
  - id: charge_status
    type: 'std::string'
    restore_value: 'no'
    initial_value: '"Startup"'
  - id: battery_charge_current
    type: float
    restore_value: 'no'
    initial_value: '1.0'
  - id: feed_in_power_threshold
    type: float
    restore_value: 'no'
    initial_value: '3900.0' # 4000W * 0.975
  - id: battery_soc_threshold
    type: float
    restore_value: 'no'
    initial_value: '60.0'
  - id: high_power_threshold
    type: float
    restore_value: 'no'
    initial_value: '3800.0'
  - id: low_power_threshold
    type: float
    restore_value: 'no'
    initial_value: '3000.0'
  - id: delta_charging_current
    type: float
    restore_value: 'no'
    initial_value: '0.2'
  - id: max_charging_current
    type: int
    restore_value: 'no'
    initial_value: '25'
  - id: min_charging_current
    type: int
    restore_value: 'no'
    initial_value: '1'
button:
  - platform: restart
    name: Restart button
    id: restart_button
    internal: true
wifi:
  ssid: null
  password: null
  ap:
    ssid: BmsSolar Fallback Hotspot
    password: null
api:
  encryption:
    key: null
ota:
  password: null
uart:
  id: uart_0
  baud_rate: 9600
  rx_buffer_size: 384
  tx_pin: "${tx_pin}"
  rx_pin: "${rx_pin}"
modbus:
  id: modbus0
  uart_id: uart_0
  send_wait_time: 900ms
modbus_controller:
  id: bms0
  address: 247
  modbus_id: modbus0
  command_throttle: 900ms
  update_interval: 3s
switch:
  - platform: gpio
    id: relais
    pin: 13
    name: 'Ausgang'
sensor:
  - platform: modbus_controller
    modbus_controller_id: bms0
    id: power_sensor
    name: Leistung
    address: 35140
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: W
    device_class: energy
    state_class: measurement
    accuracy_decimals: 0
    filters:
      - multiply: 1
    on_value:
      then:
        - lambda: |-
            if (id(power_sensor).state > id(feed_in_power_threshold)) {
              if (id(battery_charge_current) < id(max_charging_current)) {
                id(battery_charge_current) += id(delta_charging_current);
                ESP_LOGI('power_sensor', 'battery_charge_current increased to %f A',
                        id(battery_charge_current));
              }
            } else if (id(power_sensor).state < id(feed_in_power_threshold)) {
              if (id(battery_charge_current) > id(min_charging_current)) {
                id(battery_charge_current) -= id(delta_charging_current);
                ESP_LOGI('power_sensor', 'battery_charge_current decreased to %f A',
                        id(battery_charge_current));
              }
            }
  - platform: modbus_controller
    modbus_controller_id: bms0
    id: soc_sensor
    name: SOC
    address: 37007
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "%"
    device_class: energy
    state_class: measurement
    accuracy_decimals: 0
    filters:
      - multiply: 1
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                return id(soc_sensor).state > id(battery_soc_threshold);
            then:
              - if:
                  condition:
                    and:
                      - lambda: |-
                          return id(power_sensor).state > id(high_power_threshold);
                      - switch.is_off: relais
                  then:
                    - switch.turn_on: relais
                    - delay: 40s
                    - while:
                        condition:
                          not:
                            lambda: |-
                              return id(power_sensor).state < id(low_power_threshold);
                        then:
                          - delay: 1s
                    - if:
                        condition:
                          switch.is_on: relais
                        then:
                          - switch.turn_off: relais
                          - delay: 200s
